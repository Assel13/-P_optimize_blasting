import streamlit as st
import numpy as np
import pandas as pd
import joblib

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏, —Å–∫–µ–π–ª–µ—Ä–∞ –∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
try:
    model = joblib.load('C:/Users/HP/OneDrive/Documents/StreamlitProject/model.pkl')
    scaler = joblib.load('C:/Users/HP/OneDrive/Documents/StreamlitProject/scaler.pkl')
    feature_names = joblib.load('C:/Users/HP/OneDrive/Documents/StreamlitProject/feature_names.pkl')
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏, —Å–∫–µ–π–ª–µ—Ä–∞ –∏–ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {str(e)}")
    st.stop()


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è P20
def predict_p20(powder_factor, burden, spacing, ucs):
    try:
        burden_spacing_ratio = burden / spacing if spacing != 0 else 0
        ucs_log = np.log1p(ucs)

        # –°–æ–∑–¥–∞—ë–º DataFrame –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        correct_order = ['NUM_POWDER_FACTOR', 'NUM_BURDEN', 'NUM_SPACING', 'UCS_log']

        input_data = pd.DataFrame({
            'NUM_POWDER_FACTOR': [powder_factor],
            'NUM_BURDEN': [burden],
            'NUM_SPACING': [spacing],
            'UCS_log': [ucs_log]
        })[correct_order]

        # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—Å—Ç—É–ø:
        print("–ü–µ—Ä–µ–¥ transform():", input_data)

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        input_scaled = scaler.transform(input_data)

        # –ü—Ä–æ–≥–Ω–æ–∑
        prediction = model.predict(input_scaled)
        return prediction[0]

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {str(e)}")
        return None
    
# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–∑—Ä—ã–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç —Å ML")
st.write("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —á–∞—Å—Ç–∏—Ü P20 –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∑—Ä—ã–≤–Ω—ã—Ö —Ä–∞–±–æ—Ç.")

# –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
powder_factor = st.slider("NUM_POWDER_FACTOR (–∫–≥/–º¬≥)", 0.7, 1.1, 0.85)
burden = st.slider("NUM_BURDEN (–º)", 5.0, 6.0, 5.5)
spacing = st.slider("NUM_SPACING (–º)", 5.0, 6.5, 5.5)
ucs = st.slider("UCS (–ú–ü–∞)", 30.0, 100.0, 50.0)

# üîç –í—ã–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ `predict_p20()`
st.write(f"–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ predict_p20: Powder Factor = {powder_factor}, Burden = {burden}, Spacing = {spacing}, UCS = {ucs}")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
if st.button("–ü—Ä–æ–≥–Ω–æ–∑ P20"):
    p20 = predict_p20(powder_factor, burden, spacing, ucs)
    if p20 is not None:
        st.write(f"–ü—Ä–æ–≥–Ω–æ–∑ P20 (–º–º): {p20:.2f}")
        if 30 <= p20 <= 50:
            st.success("P20 –≤ —Ü–µ–ª–µ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (30‚Äì50 –º–º)!")
        else:
            st.warning("P20 –≤–Ω–µ —Ü–µ–ª–µ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (30‚Äì50 –º–º). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –º–æ–¥–µ–ª—å.")
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
st.write("–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
st.write(f"Powder Factor: {powder_factor} –∫–≥/–º¬≥")
st.write(f"Burden: {burden} –º")
st.write(f"Spacing: {spacing} –º")
st.write(f"UCS: {ucs} –ú–ü–∞")
st.write(f"Burden/Spacing Ratio: {burden/spacing:.2f}")